// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// find_theta
double find_theta(const Rcpp::IntegerVector data, const double mu, const double ax, const double bx, const double tol);
RcppExport SEXP _bayescount_find_theta(SEXP dataSEXP, SEXP muSEXP, SEXP axSEXP, SEXP bxSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double >::type ax(axSEXP);
    Rcpp::traits::input_parameter< const double >::type bx(bxSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(find_theta(data, mu, ax, bx, tol));
    return rcpp_result_gen;
END_RCPP
}
// pbnb
double pbnb(int q, double k, double alpha, double beta, bool lower, bool inclusive);
RcppExport SEXP _bayescount_pbnb(SEXP qSEXP, SEXP kSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP lowerSEXP, SEXP inclusiveSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    Rcpp::traits::input_parameter< double >::type k(kSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< bool >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< bool >::type inclusive(inclusiveSEXP);
    rcpp_result_gen = Rcpp::wrap(pbnb(q, k, alpha, beta, lower, inclusive));
    return rcpp_result_gen;
END_RCPP
}
// estimate_k_useless
Rcpp::NumericVector estimate_k_useless(const double mean_1, const double var_1, const double mean_2, const double var_2, const double cov_12, const bool paired);
RcppExport SEXP _bayescount_estimate_k_useless(SEXP mean_1SEXP, SEXP var_1SEXP, SEXP mean_2SEXP, SEXP var_2SEXP, SEXP cov_12SEXP, SEXP pairedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type mean_1(mean_1SEXP);
    Rcpp::traits::input_parameter< const double >::type var_1(var_1SEXP);
    Rcpp::traits::input_parameter< const double >::type mean_2(mean_2SEXP);
    Rcpp::traits::input_parameter< const double >::type var_2(var_2SEXP);
    Rcpp::traits::input_parameter< const double >::type cov_12(cov_12SEXP);
    Rcpp::traits::input_parameter< const bool >::type paired(pairedSEXP);
    rcpp_result_gen = Rcpp::wrap(estimate_k_useless(mean_1, var_1, mean_2, var_2, cov_12, paired));
    return rcpp_result_gen;
END_RCPP
}
// estimate_k_experiment
Rcpp::NumericVector estimate_k_experiment(const double mean_1, const double var_1, const double mean_2, const double var_2, const double cov_12, const bool paired);
RcppExport SEXP _bayescount_estimate_k_experiment(SEXP mean_1SEXP, SEXP var_1SEXP, SEXP mean_2SEXP, SEXP var_2SEXP, SEXP cov_12SEXP, SEXP pairedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type mean_1(mean_1SEXP);
    Rcpp::traits::input_parameter< const double >::type var_1(var_1SEXP);
    Rcpp::traits::input_parameter< const double >::type mean_2(mean_2SEXP);
    Rcpp::traits::input_parameter< const double >::type var_2(var_2SEXP);
    Rcpp::traits::input_parameter< const double >::type cov_12(cov_12SEXP);
    Rcpp::traits::input_parameter< const bool >::type paired(pairedSEXP);
    rcpp_result_gen = Rcpp::wrap(estimate_k_experiment(mean_1, var_1, mean_2, var_2, cov_12, paired));
    return rcpp_result_gen;
END_RCPP
}
// estimate_k
Rcpp::NumericVector estimate_k(const double mean_1, const double var_1, const double mean_2, const double var_2, const double cov_12, const bool paired);
RcppExport SEXP _bayescount_estimate_k(SEXP mean_1SEXP, SEXP var_1SEXP, SEXP mean_2SEXP, SEXP var_2SEXP, SEXP cov_12SEXP, SEXP pairedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type mean_1(mean_1SEXP);
    Rcpp::traits::input_parameter< const double >::type var_1(var_1SEXP);
    Rcpp::traits::input_parameter< const double >::type mean_2(mean_2SEXP);
    Rcpp::traits::input_parameter< const double >::type var_2(var_2SEXP);
    Rcpp::traits::input_parameter< const double >::type cov_12(cov_12SEXP);
    Rcpp::traits::input_parameter< const bool >::type paired(pairedSEXP);
    rcpp_result_gen = Rcpp::wrap(estimate_k(mean_1, var_1, mean_2, var_2, cov_12, paired));
    return rcpp_result_gen;
END_RCPP
}
// estimate_k_ml
Rcpp::NumericVector estimate_k_ml(const Rcpp::IntegerVector data_1, const double mean_1, const double var_1, const Rcpp::IntegerVector data_2, const double mean_2, const double var_2, const double cov_12, const bool paired);
RcppExport SEXP _bayescount_estimate_k_ml(SEXP data_1SEXP, SEXP mean_1SEXP, SEXP var_1SEXP, SEXP data_2SEXP, SEXP mean_2SEXP, SEXP var_2SEXP, SEXP cov_12SEXP, SEXP pairedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector >::type data_1(data_1SEXP);
    Rcpp::traits::input_parameter< const double >::type mean_1(mean_1SEXP);
    Rcpp::traits::input_parameter< const double >::type var_1(var_1SEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector >::type data_2(data_2SEXP);
    Rcpp::traits::input_parameter< const double >::type mean_2(mean_2SEXP);
    Rcpp::traits::input_parameter< const double >::type var_2(var_2SEXP);
    Rcpp::traits::input_parameter< const double >::type cov_12(cov_12SEXP);
    Rcpp::traits::input_parameter< const bool >::type paired(pairedSEXP);
    rcpp_result_gen = Rcpp::wrap(estimate_k_ml(data_1, mean_1, var_1, data_2, mean_2, var_2, cov_12, paired));
    return rcpp_result_gen;
END_RCPP
}
// get_type_ci
Rcpp::String get_type_ci(const double eff, const double lci, const double uci, const double ta, const double ti);
RcppExport SEXP _bayescount_get_type_ci(SEXP effSEXP, SEXP lciSEXP, SEXP uciSEXP, SEXP taSEXP, SEXP tiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type eff(effSEXP);
    Rcpp::traits::input_parameter< const double >::type lci(lciSEXP);
    Rcpp::traits::input_parameter< const double >::type uci(uciSEXP);
    Rcpp::traits::input_parameter< const double >::type ta(taSEXP);
    Rcpp::traits::input_parameter< const double >::type ti(tiSEXP);
    rcpp_result_gen = Rcpp::wrap(get_type_ci(eff, lci, uci, ta, ti));
    return rcpp_result_gen;
END_RCPP
}
// get_type_pv
Rcpp::String get_type_pv(const double eff, const double p1, const double p2, const double tail, const double ta, const double ti);
RcppExport SEXP _bayescount_get_type_pv(SEXP effSEXP, SEXP p1SEXP, SEXP p2SEXP, SEXP tailSEXP, SEXP taSEXP, SEXP tiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type eff(effSEXP);
    Rcpp::traits::input_parameter< const double >::type p1(p1SEXP);
    Rcpp::traits::input_parameter< const double >::type p2(p2SEXP);
    Rcpp::traits::input_parameter< const double >::type tail(tailSEXP);
    Rcpp::traits::input_parameter< const double >::type ta(taSEXP);
    Rcpp::traits::input_parameter< const double >::type ti(tiSEXP);
    rcpp_result_gen = Rcpp::wrap(get_type_pv(eff, p1, p2, tail, ta, ti));
    return rcpp_result_gen;
END_RCPP
}
// methodcomp
Rcpp::NumericMatrix methodcomp(long long sum1, int N1, double K1_p, double K1_u, double mu1, double var1, long long sum2, int N2, double K2_p, double K2_u, double mu2, double var2, double cov12, double mean_ratio, double H0_1, double H0_2, Rcpp::NumericVector conjugate_priors, int delta, int beta_iters, int approx, double tail, Rcpp::NumericVector dobson_cl, Rcpp::NumericVector dobson_priors);
RcppExport SEXP _bayescount_methodcomp(SEXP sum1SEXP, SEXP N1SEXP, SEXP K1_pSEXP, SEXP K1_uSEXP, SEXP mu1SEXP, SEXP var1SEXP, SEXP sum2SEXP, SEXP N2SEXP, SEXP K2_pSEXP, SEXP K2_uSEXP, SEXP mu2SEXP, SEXP var2SEXP, SEXP cov12SEXP, SEXP mean_ratioSEXP, SEXP H0_1SEXP, SEXP H0_2SEXP, SEXP conjugate_priorsSEXP, SEXP deltaSEXP, SEXP beta_itersSEXP, SEXP approxSEXP, SEXP tailSEXP, SEXP dobson_clSEXP, SEXP dobson_priorsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< long long >::type sum1(sum1SEXP);
    Rcpp::traits::input_parameter< int >::type N1(N1SEXP);
    Rcpp::traits::input_parameter< double >::type K1_p(K1_pSEXP);
    Rcpp::traits::input_parameter< double >::type K1_u(K1_uSEXP);
    Rcpp::traits::input_parameter< double >::type mu1(mu1SEXP);
    Rcpp::traits::input_parameter< double >::type var1(var1SEXP);
    Rcpp::traits::input_parameter< long long >::type sum2(sum2SEXP);
    Rcpp::traits::input_parameter< int >::type N2(N2SEXP);
    Rcpp::traits::input_parameter< double >::type K2_p(K2_pSEXP);
    Rcpp::traits::input_parameter< double >::type K2_u(K2_uSEXP);
    Rcpp::traits::input_parameter< double >::type mu2(mu2SEXP);
    Rcpp::traits::input_parameter< double >::type var2(var2SEXP);
    Rcpp::traits::input_parameter< double >::type cov12(cov12SEXP);
    Rcpp::traits::input_parameter< double >::type mean_ratio(mean_ratioSEXP);
    Rcpp::traits::input_parameter< double >::type H0_1(H0_1SEXP);
    Rcpp::traits::input_parameter< double >::type H0_2(H0_2SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type conjugate_priors(conjugate_priorsSEXP);
    Rcpp::traits::input_parameter< int >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< int >::type beta_iters(beta_itersSEXP);
    Rcpp::traits::input_parameter< int >::type approx(approxSEXP);
    Rcpp::traits::input_parameter< double >::type tail(tailSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type dobson_cl(dobson_clSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type dobson_priors(dobson_priorsSEXP);
    rcpp_result_gen = Rcpp::wrap(methodcomp(sum1, N1, K1_p, K1_u, mu1, var1, sum2, N2, K2_p, K2_u, mu2, var2, cov12, mean_ratio, H0_1, H0_2, conjugate_priors, delta, beta_iters, approx, tail, dobson_cl, dobson_priors));
    return rcpp_result_gen;
END_RCPP
}
// fecrt_sim_unpaired
Rcpp::DataFrame fecrt_sim_unpaired(int iters, Rcpp::NumericVector red, int N_tx, int N_ctl, double mu, double k_tx, double k_ctl, Rcpp::NumericMatrix thresholds, Rcpp::NumericVector conjugate_priors, int delta, int beta_iters, int approx, double tail, bool useml);
RcppExport SEXP _bayescount_fecrt_sim_unpaired(SEXP itersSEXP, SEXP redSEXP, SEXP N_txSEXP, SEXP N_ctlSEXP, SEXP muSEXP, SEXP k_txSEXP, SEXP k_ctlSEXP, SEXP thresholdsSEXP, SEXP conjugate_priorsSEXP, SEXP deltaSEXP, SEXP beta_itersSEXP, SEXP approxSEXP, SEXP tailSEXP, SEXP usemlSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type iters(itersSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type red(redSEXP);
    Rcpp::traits::input_parameter< int >::type N_tx(N_txSEXP);
    Rcpp::traits::input_parameter< int >::type N_ctl(N_ctlSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type k_tx(k_txSEXP);
    Rcpp::traits::input_parameter< double >::type k_ctl(k_ctlSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type thresholds(thresholdsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type conjugate_priors(conjugate_priorsSEXP);
    Rcpp::traits::input_parameter< int >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< int >::type beta_iters(beta_itersSEXP);
    Rcpp::traits::input_parameter< int >::type approx(approxSEXP);
    Rcpp::traits::input_parameter< double >::type tail(tailSEXP);
    Rcpp::traits::input_parameter< bool >::type useml(usemlSEXP);
    rcpp_result_gen = Rcpp::wrap(fecrt_sim_unpaired(iters, red, N_tx, N_ctl, mu, k_tx, k_ctl, thresholds, conjugate_priors, delta, beta_iters, approx, tail, useml));
    return rcpp_result_gen;
END_RCPP
}
// fecrt_sim_paired
Rcpp::DataFrame fecrt_sim_paired(int iters, Rcpp::NumericVector red, int N, double mu, double k_pre, double k_post, double k_c, Rcpp::NumericMatrix thresholds, Rcpp::NumericVector conjugate_priors, int delta, int beta_iters, int approx, double tail, bool useml, Rcpp::NumericVector dobson_cl, Rcpp::NumericVector dobson_priors);
RcppExport SEXP _bayescount_fecrt_sim_paired(SEXP itersSEXP, SEXP redSEXP, SEXP NSEXP, SEXP muSEXP, SEXP k_preSEXP, SEXP k_postSEXP, SEXP k_cSEXP, SEXP thresholdsSEXP, SEXP conjugate_priorsSEXP, SEXP deltaSEXP, SEXP beta_itersSEXP, SEXP approxSEXP, SEXP tailSEXP, SEXP usemlSEXP, SEXP dobson_clSEXP, SEXP dobson_priorsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type iters(itersSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type red(redSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type k_pre(k_preSEXP);
    Rcpp::traits::input_parameter< double >::type k_post(k_postSEXP);
    Rcpp::traits::input_parameter< double >::type k_c(k_cSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type thresholds(thresholdsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type conjugate_priors(conjugate_priorsSEXP);
    Rcpp::traits::input_parameter< int >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< int >::type beta_iters(beta_itersSEXP);
    Rcpp::traits::input_parameter< int >::type approx(approxSEXP);
    Rcpp::traits::input_parameter< double >::type tail(tailSEXP);
    Rcpp::traits::input_parameter< bool >::type useml(usemlSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type dobson_cl(dobson_clSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type dobson_priors(dobson_priorsSEXP);
    rcpp_result_gen = Rcpp::wrap(fecrt_sim_paired(iters, red, N, mu, k_pre, k_post, k_c, thresholds, conjugate_priors, delta, beta_iters, approx, tail, useml, dobson_cl, dobson_priors));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_bayescount_find_theta", (DL_FUNC) &_bayescount_find_theta, 5},
    {"_bayescount_pbnb", (DL_FUNC) &_bayescount_pbnb, 6},
    {"_bayescount_estimate_k_useless", (DL_FUNC) &_bayescount_estimate_k_useless, 6},
    {"_bayescount_estimate_k_experiment", (DL_FUNC) &_bayescount_estimate_k_experiment, 6},
    {"_bayescount_estimate_k", (DL_FUNC) &_bayescount_estimate_k, 6},
    {"_bayescount_estimate_k_ml", (DL_FUNC) &_bayescount_estimate_k_ml, 8},
    {"_bayescount_get_type_ci", (DL_FUNC) &_bayescount_get_type_ci, 5},
    {"_bayescount_get_type_pv", (DL_FUNC) &_bayescount_get_type_pv, 6},
    {"_bayescount_methodcomp", (DL_FUNC) &_bayescount_methodcomp, 23},
    {"_bayescount_fecrt_sim_unpaired", (DL_FUNC) &_bayescount_fecrt_sim_unpaired, 14},
    {"_bayescount_fecrt_sim_paired", (DL_FUNC) &_bayescount_fecrt_sim_paired, 16},
    {NULL, NULL, 0}
};

RcppExport void R_init_bayescount(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
